##---------------------------------------------##
             ⚡ATP-高能连锁 数据包⚡
    作者： MC3156(or Dreamy_Blaze)
    QQ： 2968254752
    MCMOD： https://center.mcmod.cn/347992/
    版本：1.21-1.21.4
                 2025.3.6编辑
##---------------------------------------------##

##----------------下面是使用文档-----------------##

##--介绍：
    ##--⚡ATP-高能连锁 数据包⚡
        #本数据包主要为玩家提供便捷的连锁式挖掘矿脉、砍伐树木功能，具有大多数“连锁采集”模组的基本功能，但除此之外还有拓展功能和高度个性化配置；高能燃烧你的ATP！
        #本文档适用于该数据包系列；数据包使用MIT开源(附LICENSE)

        #在基础下的连锁功能上，本作推出了全新的🔥联合采集🔥模式，*提高效率*：
            启用后，矿石类方块相连在一起时可以被同时采集，同样效果可运用于原木、树叶、土壤、农作物、珊瑚、染色建材等等；
        #砍伐树木后，启用🔥智能补种🔥模式可以原地栽种，*可持续发展*：
            玩家挖掘原木时，将判断该结构并消耗玩家背包库存的树苗，自动种植在对应位置，支持纤细树木和4格的粗壮树木；
            连锁数量较大(异步连锁)时不支持树木类智能补种；红树和杜鹃树不支持补种；
            智能补种还支持农作物连锁补种，这时可以配合联合采集给大范围的农田批量收种(农作物补种支持异步连锁)；
        #对于玩家砍树留下的树叶，使用🔥快速落叶🔥可以快速消除树叶，*落叶归根*：
            让那些即将枯萎的树叶早早地结束悬空的尴尬，该功能只会对玩家通过连锁留下的树叶有效，不影响其他机制；
        #快速搭建一个农场？试试🔥范围耕种🔥，*劳动光荣*：
            根据参数配置，连锁耕地，副手持水桶还可以自动在中心蓄水，还可以一键范围种植农作物；
        #全新的🔥矩形挖掘🔥模式，挖出规则的立方体，*规规矩矩*：
            可以根据自己参数配置，挖掘出四方的的空间、通道或小房间，也用于开采常见方块(例如石头等)；
        #本作还加入了🔥自动照明🔥新功能，*野怪无处遁形*：
            亮度小于7时，会自动消耗背包的火把放置在周边，常用于点亮平台、基地或矿洞防刷怪，解放双手；
            手持光源方块处于旁观模式时，可以点亮自己周围大范围区域；

        #上述拓展功能默认在全局是关闭的，多人模式下，服务器管理员可以使用全局设置命令选择性地向玩家开放拓展功能，也可以禁用基础功能。
        #玩家可以使用命令/trigger ATPminer 打开个性化设置，可选择决定启用或禁用各类拓展功能；
        #建议开采矿石等零散资源时使用默认连锁，开采陶瓦、石头等常见资源时使用矩形挖掘；
        #⭐不需要潜行可连锁的方块：矿石、(去皮)原木、花草、珊瑚、真菌、农作物、成熟的可可豆、仙人掌、甘蔗、竹子、生瓜、成熟甜浆果丛；(开启潜行连锁功能可以避免误连锁)
        #本作使用了两种方块搜索模式以优化性能消耗和游戏体验，且可以根据服务器具体硬件情况来修改相关数据配置；
        #(注意，异步连锁过程限制了每一刻的处理数量，但是生成的掉落物和经验球会产生大量性能消耗；不受大量掉落物影响时，将会看到流畅的球形扩散连锁(假设参数合适))

    ##--安装数据包：本数据包是一个标准的ZIP压缩文件(也可以解压成文件夹，便于实时修改配置文件并重新加载)；
        简而言之，需要把有效的数据包文件放在世界存档的datapacks文件夹内，服务器是world/datapacks内，重启存档或建议在游戏内输入/reload(需要权限)来加载；
        当在游戏内看到聊天栏出现ATP的加载提示，听到“叮”的提示音，意味着安装成功；使用/datapack命令可以对安装的数据包进行操作(列出/启用/禁用)。
        数据包介绍(中文WIKI)：https://zh.minecraft.wiki/w/%E6%95%B0%E6%8D%AE%E5%8C%85
        数据包安装方法(中文WIKI)：https://zh.minecraft.wiki/w/Tutorial:%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%8C%85

    ##--技术性：
        本数据包使用命令存储dp_vmn:1，计分板前缀为dp_vmn.，实体标签前缀为dp_vmn_，使用了3个trigger触发器(游戏内可见)，数据包作者注意避免命名冲突(*^▽^*)；
        文件命名空间为vmn，若出现多个数据包一起安装导致的无法使用问题，先检查其他数据包的data/minecraft/tags/function内文件是否有错误(replace不可以为true，以及函数是否是有效函数)，然后检查是否有冲突命名空间等等，若自己难以解决，请寻求他人协助寻找问题或禁用部分数据包。
        未测试通过的情况下尽量不修改核心逻辑(比如修改reset_score函数的逻辑，上百条命令压缩为scoreboard players reset @a，会导致其他计数计分板例如hunger也失效)

##--教程：
    数据包将大多数适用于自定义的配置文件放在了函数(function)的config文件夹以及标签(tags)文件夹中，下面会粗略讲解如何修改或添加；
    本文件README.TXT同目录还有一个default.txt文件，记录了默认配置文件的方块/组-ID映射关系。

    ##--基本管理
        数据包初加载只启用了基本连锁和自动照明以及参数配置，其余功能默认锁定关闭；
        游戏内玩家可以通过/trigger ATPminer唤出菜单，但只有管理员可以打开全局设置，全局设置中选择“自定”或“强制启用”即可解锁其余功能
        游戏内管理员会看到玩家使用/trigger菜单的通知，关闭方法：/gamerule sendCommandFeedback false
        上述指令也会关闭其他命令反馈，将不再看到其他玩家使用菜单的通知刷屏，当需要命令反馈时可选择开启
        全局值参数配置：
            1.子线程[每个异步连锁事件①中每TICK②最多处理的方块数量，初始值64]
                该值可以根据服务器硬件配置条件调整，用于限制每TICK的连锁的计算量，值越大连锁速度越快(64意味着每秒可以处理1280个方块)，值越小性能越好(太小的值可能会中断搜索，不建议低于16)
                本数据包采用DFS预尝试③,方块数量过大时会自动转异步连锁④，分步处理，大大减少了短时间内由于较大性能消耗导致的服务器mspt过高而超时崩溃的可能
                注意：该值是单个事件的限制，当同时有2名玩家同时连锁大数量方块时，线程数会乘2，尽量避免多玩家同时大规模连锁(一般小体量的连锁影响不大)
            2.搜索量[每个连锁事件最大可以搜索多少方块，初始值1048576]
                该值仅仅是一个理论值，实际情况基本不会达到最大值(连锁距离限制，工具耐久限制等等，除非特意为之)，按需调整即可(性能上，这是个次要参数)
                该值决定了每个连锁事件最多可以搜索并挖掉多少方块，该值将不会低于DFS尝试值
            3.DFS尝试[搜索到多少方块还未结束时，转用异步连锁，注解3有所补充，初始值640]
                该值影响了玩家一次性挖超过多少方块时，采用“不一瞬间挖掘掉”的分步的搜索方式，若一堆方块有640以下的数量，可以瞬间全部处理，超过该值会启用异步
                该值较低时相当于禁用了DFS(没有特别要求的话尽量不禁用)，该值较高时连锁大量方块时服务器会有短时间的卡顿，过大则会导致一直卡顿直到崩溃
                注意：为了玩家体验，DFS在无法挖掘掉所有方块时的游戏体验并不好(“钻洞”挖掘)，所以当工具耐久或实际情况不足以挖掘完时，即使方块量小于640，也会使用异步连锁(球形更加美观)
            4.搜索次数[每个异步连锁事件中最多进行多少TICK来搜索方块，初始值32768]
                该值决定了每个事件最多持续多少TICK，(子线程×搜索次数，也相当于一个最大值限制，例如64×32768)，实际情况也很难达到该值限制，按需调整即可(性能上，这是个次要参数)
        注解：
            ①异步连锁事件：有可视化的扩散过程的，不是一瞬间完成的连锁采集，当搜索到方块数量过大(超过DFS尝试)时会自动使用该方式搜索(类似BFS)，每个游戏刻只处理一部分(即子线程数)方块，防止服务器卡死
            ②TICK：在Minecraft中，游戏跑一遍循环代码需要1TICK，1TICK一般是现实的0.05秒，每秒预期可以跑20TICK，当然服务器mspt较高时达不到这一预期，服务器TPS可以体现每秒TICK数，长时间mspt过高(计算量过大，例如生物实体过多，玩家数量过多等等)会导致服务器卡顿甚至崩溃
            ③DFS预尝试：DFS即程序算法中的“深度优先搜索”，以类似“钻洞探路”的方式，使用递归函数，可以瞬间处理较大的方块量，DFS预尝试就是当搜索数大于一个固定值后放弃搜索(假如搜索石头，石头在世界中的数量过于庞大，持续搜索可以导致服务器卡死)
            ④异步连锁：即把数量过大的方块采用每TICK处理一部分的方式连锁，也是BFS(广度优先搜索)连锁，以类似“地毯式搜索”的方式，以球形扩散，逐渐连锁掉所有方块，当DFS预尝试到达最大值放弃时将使用异步连锁

    ##--如何添加一个新的(可以是mod中的)可被连锁采集的方块？>>config
        (概括：在data/vmn/function/config中仿照示例修改scoreboard，block_matching，mineable_block，reset_score和exp_orb即可。)
        打开文件夹data/vmn/function/config，会看到若干文件夹和其他mcfunction文件，若干文件夹是其他的功能，先找到5个mcfunction文件(分别是scoreboard，block_matching，mineable_block，reset_score和exp_orb)；
        这些文件内有默认的可连锁方块列表，开头几行都是注释，根据注释的参考格式和示例解释添加新段落即可(注意格式，失误了会导致整个配置文件在游戏内无法生效)；
        其中exp_orb是可选配置，当该方块采集后会掉落经验值时，才需要编辑该文件；
        ⚠️注意：如果你想修改scoreboard文件中的自定义的计分板名称，需要在游戏中先禁用数据包，使用/scoreboard命令删除旧的计分板，重载后启用数据包(以防命名冲突)。

    ##--如何禁用/卸载本数据包或者某个方块/某个组
        打开data/vmn/function/config/uninstall/black_list中按格式添加新段落，用以临时禁用某方块的连锁；
        打开data/vmn/function/config/combination/scan_group，取消某个组检查从该行开头注释掉即可(井号#注释)
        若要清理所有本数据包注册的数据，请打开data/vmn/function/config/uninstall/total_uninstall查看方法。

    ##--如何在现有的联合采集组中添加新方块？>>combination
        (概括：在data/vmn/function/config/combination/score文件夹中，找到要加入的组，将可以连锁的方块仿照示例写到新的一行(变量只有计分板名称)，然后在data/vmn/tags/block/group文件夹找到组名将方块ID加入到文件中)
        首先要确保这个方块已经写入了基础功能的配置文件，创立了相关的计分板；
        打开文件夹data/vmn/function/config/combination/score，假如这种方块可以和矿石组一起连锁，就打开ores文件，按照下面的格式新加一行；
        execute if score @s <计分板名称> matches 1.. run scoreboard players set #block_value dp_vmn.temp <组ID>
        其中<计分板名称>是你在基础配置文件中给该方块的挖掘事件定义的名称，-2是矿石组的组ID(-3是原木组)；
        然后，打开文件夹data/vmn/tags/block/group，找到ores，按照文件内的格式(JSON)添加一行为新方块ID(注意，JSON格式要求严格，请勿遗漏任何标点符号)；
        其中方块ID可以在游戏内F3+H高级提示或Wiki或模组站点查询到；
        注意，同一个方块不可以加入两个组，将会选择最先检查到的组，若想要去掉某个组员，按照上面的教程反向操作即可；
        注意：tags文件夹在vmn和minecraft文件夹都存在，请注意路径。

    ##--如何添加新的联合采集组？>>combination
        (概括：在combination的score文件夹内创建文件，后缀是.mcfunction，选定-10000~-2的一个整数ID且不能和其他文件的ID重复，仿照其它同类文件写，然后在data/vmn/tags/block/group文件夹内添加同名文件，后缀是.json，仿照其他文件格式填充内容，在文件scan_group和matching_group中按照给出的示例格式添加新的段落)
        打开文件夹data/vmn/function/config/combination，在score两个文件夹内创建一个文件，后缀是.mcfunction，假设新组名是example.mcfunction；
        打开文件夹data/vmn/tags/block/group，创建一个同名的文件，后缀是.json，按照上述例子，这个文件是example.json；
        注意：组名只能是小写字母a-z，数字0-9，下划线_，减号-和小数点.的组合；
        在文件scan_group和matching_group中按照给出的示例格式添加新的段落；
        注意，<组ID>可以自定义，需要是-10000~-2的整数，且不可以和其他组重复，<文件名>即上述假设的example(不需要加.mcfunction或.json后缀)；
        最后，根据前面的教程，在新的组里添加新方块，该组就是一个有效的联合组了。

    ##--如何添加新的可被识别的工具？(用于物品没有tool的max_damage组件的情况，例如mod里的工具)
        [为了版本兼容，此处不使用execute if items语法，使用execute if predicate](注意，路径不在config中)
        打开data/vmn/function/main/vmn/check_tool2和check_tool3两个文件
        如果该工具具有和原版某些工具相同的耐久，则可以将其写入现有的标签(tags)，下面举例；
        >>>比如工具A的耐久为1561，打开check_tool3发现有一行如下：
            execute if predicate vmn:if_items/tool/diamond_tools run scoreboard players set #dfs_max_damage dp_vmn.temp 1561
            其中vmn:if_items/tool/diamond_tools是谓词，1561是最大耐久，则可以打开vmn/predicate/if_items/tool/diamond_tools发现其中有这么一段(已省略换行和空格)
            "mainhand": {"items": "#vmn:tool/diamond_tools"}
            然后我们进入vmn/tags/tool/diamond_tools，发现里面有原版所有钻石工具的物品ID，在下面添加一行工具A的命名空间ID即可
            只需从这一个文件添加命名空间即可，其它文件不需要修改
        如果该工具不和某些原版工具在同一组，或者耐久相同的方块没有组(比如剪刀有238，但是并没有上述那样的tags的json文件)；
        >>>比如工具B和C的耐久都是238，你有2个选择：
            1.新建两个谓词判断(谓词就是数据包里用来条件判断的一类json文件)：
                打开文件夹data/vmn/predicate/if_items/tool，新建文件(后缀是.json，假设是super_tool.json)仿照其他文件格式复制，将"items"后面的内容改成工具命名空间ID
                比如工具B的mod命名空间为abc，工具B的ID是super_tool，则写为"items":"abc:super_tool"
                打开data/vmn/function/main/vmn/check_tool2和check_tool3两个文件，仿照给出的格式添加即可，以check_tool3为例参考格式如下：
                execute if predicate vmn:if_items/tool/<文件名> run scoreboard players set #dfs_max_damage dp_vmn.temp <最大耐久>
                按照上述例子，<文件名>改成super_tool，<最大耐久>改成238即可，同理check_tool2也需要仿照改写；
                同理，工具C也可以这么添加；
                最后，把该物品"abc:super_tool"写在data/vmn/tags/item/damage_tool标签内。
            2.新建一个工具标签：
                打开文件夹data/vmn/tags/item/tool，新建一个json文件(假设是all_tools.json)，将最大耐久度一样的工具的命名空间ID仿照其他文件格式写入；
                根据上述方法1添加一个谓词，将"item"行仿照其他文件改写，按照本例，写为"items":"#vmn:tool/all_tools"
                打开data/vmn/function/main/vmn/check_tool2和check_tool3两个文件，仿照给出的格式添加即可，方法1中有参考格式。
                (若这一组工具的耐久为238，你还可以把剪刀写在该组的tags中)
                最后，把该标签"#vmn:tool/all_tools"写在data/vmn/tags/item/damage_tool标签内。

    ##--如何添加新的“不影响耐久”的方块？(例如花和草，只会影响剪刀耐久消耗)
        打开data/vmn/tags/block/no_damage文件，按照格式添加新方块即可。

    ##--数据包里的这些其他文件都有什么用？可不可以修改？
        如果你想深入了解数据包文件结构，参考上述介绍部分安装数据包部分的连接，或者在游戏内打开trigger设置点击"数据包"也可打开链接；
        这里简单介绍一下本数据包的文件：
        在这个数据包zip压缩文件中，LICENSE是本数据包使用的开源许可(MIT)，pack.mcmeta是用于识别数据包的文件(必需)，default.txt是默认的方块和ID对应值(参考文件)
        data文件夹内存放着所有数据，部分配置可以简单修改，核心部分不建议一般用户擅自修改，避免出现问题；
        1.data/minecraft文件夹的tags的function的load和tick是初始化文件和参与游戏循环的文件的函数标签(核心部分)；
        2.data/vmn文件夹内的advancement、item_modifier、loot_table中的文件用于条件识别、概率模拟和某战利品掉落(核心部分)；
        3.data/vmn/tags文件夹内都是标签文件，用于操作或匹配一组元素，其中function文件夹是函数标签(核心部分)；
        4.data/vmn/tags内的block和item都属于配置部分，可以修改，其中block文件夹：
            group文件夹内是联合采集的方块组的标签，在上述已有介绍，可以配置新组，或添加新组员；
            check_dirts.json是判断自动补种树苗的土壤检测，默认情况下只有原版泥土标签，farm_dirt.json是判断是否可以被耕作的土壤的标签；
            no_damage上述已有介绍，剩下三个torch开头的文件是自动照明的方块检查标签；
        5.data/vmn/tags的item文件夹也都属于配置部分：
            tool文件夹内都是工具组，用于最大耐久值，上述有所介绍；farm文件夹内的farm_tools.json是耕地工具标签，valid_seeds.json是可以进行范围种植的种子标签；
            damage_tool.json是可以被识别并进入最大耐久检查的所有工具，whitelist_tool.json是即使有耐久值也会被跳过的白名单，其中包括所有原版盔甲装备、特殊工具等等；
        6.data/vmn/predicate存放着所有用于条件检查的谓词文件：
            其中location是位置检查，if_block内的torch开头的两个文件也用于自动照明的方块检查；
            if_items的damage_tool.json和whitelist_tool.json就是检查上述tags中对应标签的谓词；
            if_items的offhand_water_bucket.json用于副手水桶检查；
            if_items的tool文件夹是工具标签检查，上述已有介绍
        7.data/vmn/function是函数文件，是整个数据包全部功能最重要的执行部分：
            main文件夹是核心执行代码，若无说明，不建议在不了解本数据包函数调用运行的情况下擅自修改，此处不再介绍；
            config文件夹是可配置的，下面讲解以上教程未提到的部分：
                farmland是与农作物范围耕种相关的配置文件，根据文件内给出的参考格式修改即可，可添加新的农作物种子用于范围耕种；
                smart_replant是与智能补种相关的配置文件，其中的farmland文件夹内是农作物相关的智能补种，其他文件是树苗的智能补种；
                vanilla是原版方块内容的必须项，一般情况不需修改；
                需要相关功能的添加或修改，只需将对应位置的所有配置文件按照规则和参考格式添加或修改即可。
        8.关于tags部分格式的补充：
            对于tags文件，你会看到{"id":"minecraft:mangrove_log","required":false}这种写法格式(已省略换行和空格)，用于若后期可能会删除某一模组导致方块信息不存在的情况，按照这种格式写入tags会忽略这一ID；
            上述例子是原版在1.19添加的红树原木，"required":false确保在未更新红树的版本(例如1.18)也可以使标签文件有效(忽略了这个ID)。

##--兼容性：
    1.数据包命令权限较大，因此大概率会绕过领地插件对私人领地的保护去连锁，即不兼容领地功能；
    2.部分插件和一些模组会改写MC原版指令逻辑，若发现相关问题，请禁用这些模组/插件或本数据包；
    3.少数服务端核心不支持数据包，例如Folia，其他大多插件端和模组端以及原版都支持；
    4.[在某些辅助mod的影响下]会出现damage标签误添加现象，导致相同物品无法堆叠，但该情况概率极小(可以用特殊方式必然触发)；
    5.重载时，服务器后台报错是正常现象，因为做了版本兼容(不同版本识别到不属于该版本的格式会报错)，若你的服务端会因此禁用部分功能，请禁用本数据包(情况严重请反馈)；

##--可能的疑问：
    1.玩家：为什么智能补种没有生效？
      检查一下是否开启了矩形挖掘，关闭它；如果是树苗补种的话，还需要关闭联合采集模式；另外记得检查一下是否开启了潜行连锁；
    2.玩家：为什么一片区域只挖掘了一小块就停止连锁了？
      通常出现在异步连锁，大概率是由于手持物品变化，如果你手持可堆叠的物品，即使数量变了也会导致连锁提前结束(因此手持与连锁方块不相关的物品或者一组物品或者不可堆叠的工具都可以解决)；
    3.玩家：为什么我采集原木之后，并没有快速落叶？
      确认矩形挖掘是否关闭，然后，当树叶附近还有原木时，树叶不会枯萎，你可以采集附近所有与之相连的原木，最终所有树叶会全部枯萎；玩家放置的树叶永远不会枯萎；
    4.设置界面显示的方框 □ 是什么？
      那其实是火焰🔥和锁🔒🔓的标志，MC版本较低不支持该字符显示(例如1.18)，它没有被显示出来；不过，在每个功能后面，红色 □ 代表锁定关闭，绿色 □ 代表锁定开启；
    5.为什么/reload后，后台会有报错？(awa上面貌似提到了awa)
      因为作者做了不同版本的检测和兼容，整合到了一个包，所以对应版本会对其他版本的函数报错，但是完全不影响运行，如果看到Failed to load ... vmn:,带有vmn(数据包的命名空间)的报错全部忽略即可；
    6.玩家：玻璃为什么不可以连锁采集？对于其他方块，为什么有些方块可以连锁有些方块不可以？
      玻璃理论上是可以的，而且有玻璃组和玻璃板组，但是玻璃可能因为没有有效的开采工具而无法触发连锁；部分方块由于较为常见，必须潜行才可以连锁(详见上述“介绍”部分，不需潜行即可连锁的方块)；

##--END
